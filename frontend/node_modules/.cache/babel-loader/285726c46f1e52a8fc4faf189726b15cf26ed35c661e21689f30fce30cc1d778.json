{"ast":null,"code":"import axios from \"axios\";\nimport otpVerify from '../components/otpVerify.vue';\nexport default {\n  components: {\n    otpVerify\n  },\n  data() {\n    return {\n      registered: false,\n      dt: {\n        userEmail: \"\",\n        userPassword: \"\",\n        confirmPassword: \"\",\n        userNumber: \"\",\n        userAddress: \"\",\n        userCity: \"\"\n      }\n    };\n  },\n  methods: {\n    back() {\n      this.registered = false;\n    },\n    register() {\n      if (this.dt.userEmail == \"\" || this.dt.userPassword == \"\" || this.dt.confirmPassword == \"\" || this.dt.userNumber == \"\" || this.dt.userAddress == \"\" || this.dt.userCity == \"\") {\n        alert(\"Please fill all the fields\");\n      } else {\n        if (this.dt.userPassword == this.dt.confirmPassword) {\n          console.log(this.dt.userEmail);\n          axios.get(`http://localhost:6969/sendmail/${this.dt.userEmail}`).then(response => console.log(response)).catch(error => console.log(error));\n          this.registered = !this.registered;\n        } else {\n          alert(\"Passwords do not match\");\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","otpVerify","components","data","registered","dt","userEmail","userPassword","confirmPassword","userNumber","userAddress","userCity","methods","back","register","alert","console","log","get","then","response","catch","error"],"sources":["/home/adi/Documents/Big-Styles/src/views/SignUp.vue"],"sourcesContent":["<template>\n  <div class=\"text-center\"><h1 class=\"text-bg-dark\">User Registration</h1></div>\n  <div>\n    <form class=\"form-control text-center\" @submit.prevent=\"register\">\n      <label for=\"userEmail\">Enter your email:</label><br />\n      <input\n        type=\"email\"\n        name=\"userEmail\"\n        id=\"userEmail\"\n        class=\"border-3\"\n        v-model.lazy=\"dt.userEmail\"\n      /><br />\n      <label for=\"userPassword\">Enter your password:</label><br />\n      <input\n        type=\"password\"\n        name=\"userPassword\"\n        id=\"userPassword\"\n        v-model.lazy=\"dt.userPassword\"\n      /><br />\n      <label for=\"confirmPassword\">Enter your password again:</label><br />\n      <input\n        type=\"password\"\n        name=\"confirmPassword\"\n        id=\"confirmPassword\"\n        v-model.lazy=\"dt.confirmPassword\"\n      /><br />\n      <label for=\"userNumber\">Enter Contact Number</label><br />\n      <input type=\"number\" id=\"userNumber\" v-model.lazy=\"dt.userNumber\" /><br />\n      <label for=\"userAddress\">Enter your Address</label><br />\n      <input\n        type=\"text\"\n        id=\"userAddress\"\n        v-model.lazy=\"dt.userAddress\"\n      /><br />\n      <label for=\"userCity\">Pincode</label><br />\n      <input type=\"number\" id=\"userCity\" v-model.lazy=\"dt.userCity\" /><br />\n      <br />\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n\n\n  <div>\n    <otpVerify v-if=\"registered\" :email=\"dt?.userEmail\" @back=\"back\" />\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\"\nimport otpVerify from '../components/otpVerify.vue'\nexport default {\n  components:{\n    otpVerify\n  },\n  data() {\n    return {\n      registered: false,\n      dt: {\n        userEmail: \"\",\n        userPassword: \"\",\n        confirmPassword: \"\",\n        userNumber: \"\",\n        userAddress: \"\",\n        userCity: \"\",\n      },\n    };\n  },\n  methods: {\n    back(){\n      this.registered=false;\n    },\n    register() {\n      if (\n        this.dt.userEmail == \"\" ||\n        this.dt.userPassword == \"\" ||\n        this.dt.confirmPassword == \"\" ||\n        this.dt.userNumber == \"\" ||\n        this.dt.userAddress == \"\" ||\n        this.dt.userCity == \"\"\n      ) {\n        alert(\"Please fill all the fields\");\n      } else {\n        if (this.dt.userPassword == this.dt.confirmPassword) {\n          console.log(this.dt.userEmail)\n          axios.get(`http://localhost:6969/sendmail/${this.dt.userEmail}`)\n          .then((response)=>console.log(response))\n          .catch((error)=>console.log(error));\n          this.registered= !this.registered;\n        } else {\n          alert(\"Passwords do not match\");\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style></style>\n"],"mappings":"AAgDA,OAAOA,KAAI,MAAO,OAAM;AACxB,OAAOC,SAAQ,MAAO,6BAA4B;AAClD,eAAe;EACbC,UAAU,EAAC;IACTD;EACF,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,KAAK;MACjBC,EAAE,EAAE;QACFC,SAAS,EAAE,EAAE;QACbC,YAAY,EAAE,EAAE;QAChBC,eAAe,EAAE,EAAE;QACnBC,UAAU,EAAE,EAAE;QACdC,WAAW,EAAE,EAAE;QACfC,QAAQ,EAAE;MACZ;IACF,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,IAAIA,CAAA,EAAE;MACJ,IAAI,CAACT,UAAU,GAAC,KAAK;IACvB,CAAC;IACDU,QAAQA,CAAA,EAAG;MACT,IACE,IAAI,CAACT,EAAE,CAACC,SAAQ,IAAK,EAAC,IACtB,IAAI,CAACD,EAAE,CAACE,YAAW,IAAK,EAAC,IACzB,IAAI,CAACF,EAAE,CAACG,eAAc,IAAK,EAAC,IAC5B,IAAI,CAACH,EAAE,CAACI,UAAS,IAAK,EAAC,IACvB,IAAI,CAACJ,EAAE,CAACK,WAAU,IAAK,EAAC,IACxB,IAAI,CAACL,EAAE,CAACM,QAAO,IAAK,EAAC,EACrB;QACAI,KAAK,CAAC,4BAA4B,CAAC;MACrC,OAAO;QACL,IAAI,IAAI,CAACV,EAAE,CAACE,YAAW,IAAK,IAAI,CAACF,EAAE,CAACG,eAAe,EAAE;UACnDQ,OAAO,CAACC,GAAG,CAAC,IAAI,CAACZ,EAAE,CAACC,SAAS;UAC7BN,KAAK,CAACkB,GAAG,CAAE,kCAAiC,IAAI,CAACb,EAAE,CAACC,SAAU,EAAC,EAC9Da,IAAI,CAAEC,QAAQ,IAAGJ,OAAO,CAACC,GAAG,CAACG,QAAQ,CAAC,EACtCC,KAAK,CAAEC,KAAK,IAAGN,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC,CAAC;UACnC,IAAI,CAAClB,UAAU,GAAE,CAAC,IAAI,CAACA,UAAU;QACnC,OAAO;UACLW,KAAK,CAAC,wBAAwB,CAAC;QACjC;MACF;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}